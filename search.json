[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Migrating my blog from Hugo to Quarto\n\n\n\nQuarto\n\n\n\n\n\n\n\n\n\nNov 25, 2022\n\n\n\n\n\n\n\n\n\n\n\n\nHow to Alter Git Histories\n\n\n\ngit\n\nTIL\n\n\n\nRemove files from your git history with git-filter-repo\n\n\n\n\n\nNov 12, 2022\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/migrating-to-quarto/index.html",
    "href": "blog/migrating-to-quarto/index.html",
    "title": "Migrating my blog from Hugo to Quarto",
    "section": "",
    "text": "I just finished migrating my blog from Hugo to Quarto. Hugo is an amazing static site generator, great for anyone looking to make a beautiful website or blog. However, I found that Quarto supports computational material, like Jupyter notebooks, much more efficiently."
  },
  {
    "objectID": "blog/migrating-to-quarto/index.html#intro-to-quarto",
    "href": "blog/migrating-to-quarto/index.html#intro-to-quarto",
    "title": "Migrating my blog from Hugo to Quarto",
    "section": "Intro to Quarto",
    "text": "Intro to Quarto\nQuarto is a tool for compiling and publishing markdown and Jupyter notebooks into HTML, PDF, or other formats, similar to Hugo and Jupyter Book. It is based on the Quarto Markdown .qmd filetype, which is pretty similar to the MyST markdown filetype (the Jupyter Book equivalent).\nQuarto is maintained by Posit, the company that originally began as RStudio (which it still maintains). They also created R Markdown, a fantastic markup language for R projects. Quarto Markdown .qmd, their new generalization of R Markdown, is the core filetype along with Jupyter ipynb notebooks. It’s kind of like a hybrid of the two. Posit has been making high-quality editors and writing tools for quite some time, and they have continued this trend with Quarto."
  },
  {
    "objectID": "blog/migrating-to-quarto/index.html#why-i-chose-quarto-over-hugo",
    "href": "blog/migrating-to-quarto/index.html#why-i-chose-quarto-over-hugo",
    "title": "Migrating my blog from Hugo to Quarto",
    "section": "Why I chose Quarto over Hugo",
    "text": "Why I chose Quarto over Hugo\nAs I mentioned, Hugo is an excellent tool for generating static sites, and I had just started a blog using Hugo a few weeks ago. However, I couldn’t find a way that meshed with my brain for dealing with computational content in Hugo, like Jupyter notebooks or python scripts. The solution I found on Quarto’s website to including computational content in Hugo involves writing Quarto .qmd files and rendering them into Hugo .md files before running Hugo. This process works if you have a well-established Hugo blog, but since mine is relatively new, I decided to migrate wholesale to Quarto and have been happy with the move.\nQuarto’s strength is in its handling of computational content. For example, my recent blog post on git-filter-repo was written in a single .qmd file tied to a bash Jupyter kernel, and configuring it with Quarto was relatively painless. This style of computational writing seems to fit my brain a lot better, too.\nSome other noteworthy features I’ll mention quickly: Quarto also freezes computational content, taking snapshots of computations that get checked into version control1. This speeds up the rendering process, and it ensures that you don’t have trouble building your website in 5 years time when dependencies grow stale! Quarto has great editor support too, which is a nice bonus."
  },
  {
    "objectID": "blog/migrating-to-quarto/index.html#quarto-resources",
    "href": "blog/migrating-to-quarto/index.html#quarto-resources",
    "title": "Migrating my blog from Hugo to Quarto",
    "section": "Quarto Resources",
    "text": "Quarto Resources\nFor a great intro on how to get started making a blog with Quarto, check out this blog post from Albert Rapp – I followed it closely in making this blog. The Quarto Documentation is quite thorough as well. You can also check out the source code to my blog to see how it’s set up."
  },
  {
    "objectID": "blog/migrating-to-quarto/index.html#footnotes",
    "href": "blog/migrating-to-quarto/index.html#footnotes",
    "title": "Migrating my blog from Hugo to Quarto",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFor comparison, Jupyter Book does something similar to this as well with execution caching.↩︎"
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research",
    "section": "",
    "text": "Moduli Spaces of Twisted Hermite-Einstein Connections on K3 Surfaces. My PhD thesis under the supervision of Nick Addington.\nTwisted Fourier-Mukai partners of Enriques surfaces. With Nick Addington. Appears in Math. Z. 297, 2021. (Arxiv Link)"
  },
  {
    "objectID": "research.html#in-mathematics",
    "href": "research.html#in-mathematics",
    "title": "Research",
    "section": "",
    "text": "Moduli Spaces of Twisted Hermite-Einstein Connections on K3 Surfaces. My PhD thesis under the supervision of Nick Addington.\nTwisted Fourier-Mukai partners of Enriques surfaces. With Nick Addington. Appears in Math. Z. 297, 2021. (Arxiv Link)"
  },
  {
    "objectID": "research.html#in-physics",
    "href": "research.html#in-physics",
    "title": "Research",
    "section": "In Physics",
    "text": "In Physics\n\nHyperspherical approach to a three-boson problem in two dimensions with a magnetic field. With Seth Rittenhouse and B.L. Johnson. Appears in Phys. Rev. A 93, 2016."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Andrew Wray",
    "section": "",
    "text": "I’m Andrew Wray, and I am a data scientist and mathematician based in Seattle, WA.\nI received my Bachelor’s of Science in Math and Physics at Western Washington University in 2014, where I was recognized as WWU Math Department’s Outstanding Graduate. I completed my PhD in Algebraic Geometry at the University of Oregon in June 2020 under the guidance of Nick Addington. These days I work as a data scientist for Fullpower Technologies developing and enhancing AI-based algorithms for Sleeptracker.\nIf you wish to get in contact with me, feel free to send me an email (andrew.wray2718 at gmail dot com) or reach out on LinkedIn."
  },
  {
    "objectID": "blog/til/git-filter-repo/index.html",
    "href": "blog/til/git-filter-repo/index.html",
    "title": "How to Alter Git Histories",
    "section": "",
    "text": "I recently cleaned a couple of git repos that had large data files committed early in their history, and in the process I learned about git-filter-repo, a tool for cleanly altering git histories.\nThere are many reasons you might need to modify your git history. For example, consider a local repo you want to push to Github that at some point in time had a file larger than their 100MB cap committed. In order to push to Github, you would need to not only remove the file from your repo with git rm, but also remove the file from any commit it showed up in. Another common scenario: you want to purge your git history of any accidentally tracked junk files, such as __pycache__ folders or .DS_Store files.\nIn both scenarios, the goal becomes to completely rid a file (or directory) from the git history."
  },
  {
    "objectID": "blog/til/git-filter-repo/index.html#the-old-way-git-filter-branch",
    "href": "blog/til/git-filter-repo/index.html#the-old-way-git-filter-branch",
    "title": "How to Alter Git Histories",
    "section": "The old way: git filter-branch",
    "text": "The old way: git filter-branch\nWhen you search around for ideas on how to rid files from histories you might find a lot of older stack-exchange posts and tutorial websites with solutions involving git filter-branch. However, according to the git filter-repo readme, filter-branch has numerous problems: it is slow, potentially unsafe for your repository, and clunky to use. For that reason I won’t describe how to use it here."
  },
  {
    "objectID": "blog/til/git-filter-repo/index.html#enter-git-filter-repo",
    "href": "blog/til/git-filter-repo/index.html#enter-git-filter-repo",
    "title": "How to Alter Git Histories",
    "section": "Enter git filter-repo",
    "text": "Enter git filter-repo\nPeople have since built simpler, more effective tools for performing git history manipulations, and the best one I’ve found is git-filter-repo. I picked it after having been convinced by their comparisons to other tools in this area. They cover many use cases in their handbook, which is worth at least glancing over."
  },
  {
    "objectID": "blog/til/git-filter-repo/index.html#example-removing-files-from-the-git-history",
    "href": "blog/til/git-filter-repo/index.html#example-removing-files-from-the-git-history",
    "title": "How to Alter Git Histories",
    "section": "Example: removing files from the git history",
    "text": "Example: removing files from the git history\nIn this post I’ll focus on the example of removing a file from the git history. However, this works the same with directories and similarly with glob patterns or regex; see --path-glob and --path-regex.\nFor illustration, I’ll initialize an empty git repository and add two files, file_1.txt and file_2.txt, in a single commit.\n\nmkdir /tmp/new-repo && cd /tmp/new-repo\ngit init\ntouch file_1.txt file_2.txt\ngit add .\ngit commit -m \"Initial commit\"\n\nInitialized empty Git repository in /private/tmp/new-repo/.git/\n[main (root-commit) 4d23f8d] Initial commit\n 2 files changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 file_1.txt\n create mode 100644 file_2.txt\n\n\n\ngit log --name-status --oneline\n\n\n4d23f8d (HEAD -&gt; main) Initial commit\n\nA   file_1.txt\n\nA   file_2.txt\n\n\n\n\nFor this example our plan will be to delete file_2.txt from the git history without deleting file_2.txt itself.\n\nStep 1: Decaching\n“Decaching” is a word I made up for this step of “remove the file from the current git commit but keep it around in the folder.” You can do this with\n\ngit rm --cached file_2.txt\n\nrm 'file_2.txt'\n\n\nVerify by checking that ls still shows both files, and that git status shows that file_2.txt is no longer tracked.\n\nls\n\nfile_1.txt  file_2.txt\n\n\n\ngit status --short\n\n\n## main\n\nD  file_2.txt\n\n?? file_2.txt\n\n\n\n\n\n\nStep 2: filter-repo\nWith file_2.txt unstaged, apply filter-repo like this to delete file_2.txt from the history:\n\ngit filter-repo --path file_2.txt --invert-paths --force\n\nParsed 1 commits\nNew history written in 0.02 seconds; now repacking/cleaning...\nRepacking your repo and cleaning out old unneeded objects\nHEAD is now at 9e2acce Initial commit\nEnumerating objects: 3, done.\nCounting objects:  33% (1/3)Counting objects:  66% (2/3)Counting objects: 100% (3/3)Counting objects: 100% (3/3), done.\nWriting objects:  33% (1/3)Writing objects:  66% (2/3)Writing objects: 100% (3/3)Writing objects: 100% (3/3), done.\nTotal 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)\nCompletely finished after 0.07 seconds.\n\n\nThe --path specifies the path you’re trying to target for removal, and the --invert-paths is basically the logical negation of the filtering condition, so when it’s applied it will only delete file_2.txt. When you leave that flag off, you instead delete everything except file_2.txt. You get only the file, or everything but the file.\nThe --force flag is needed because filter-repo expects us to follow best practices by only using it on a fresh clone. In practice1, you would commit all your work, get a clean git state, and make a fresh clone of your repo to operate on with filter-repo.\nNow check the files in the git log and filesystem:\n\nls\n\nfile_1.txt  file_2.txt\n\n\n\ngit log --name-status --oneline                         \n\n\n9e2acce (HEAD -&gt; main) Initial commit\n\nA   file_1.txt\n\n\n\n\nThe single commit now does not have any information pertaining to file_2.txt, and file_2.txt is still around on the filesystem. (If you just wanted to delete it completely, you could just skip the decaching step altogether.)\nThat’s all there is to it!"
  },
  {
    "objectID": "blog/til/git-filter-repo/index.html#footnotes",
    "href": "blog/til/git-filter-repo/index.html#footnotes",
    "title": "How to Alter Git Histories",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSee this part of the handbook↩︎"
  }
]