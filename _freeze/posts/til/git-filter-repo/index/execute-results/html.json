{
  "hash": "5b4c5a2464d7ba307cb029347abcb18e",
  "result": {
    "markdown": "---\ntitle: How to Alter Git Histories\ndate: '2022-11-12'\nmodified: '2022-11-25'\ncategories:\n  - git\n  - TIL\ndescription: Remove files from your git history with `git-filter-repo`\n---\n\nI recently cleaned a couple of git repos that had large data files committed early in their history, and in the process I learned about [git-filter-repo][filter_repo_github], a tool for cleanly altering git histories.\n\nThere are many reasons you might need to modify your git history. For example, consider a local repo you want to push to Github that at some point in time had a file larger than [their 100MB cap][github_filesize_caps] committed. \nIn order to push to Github, you would need to not only remove the file from your repo with `git rm`, but also remove the file from _any commit_ it showed up in.\nAnother common scenario: you want to purge your git history of any accidentally tracked junk files, such as `__pycache__` folders or `.DS_Store` files.\n\nIn both scenarios, the goal becomes to completely rid a file (or directory) from the git history.\n\n## The old way: `git filter-branch`\n\nWhen you search around for ideas on how to rid files from histories you might find a lot of older stack-exchange posts and tutorial websites with solutions involving `git filter-branch`. However, according to the git filter-repo [readme][filter_repo_github_subsec], `filter-branch` has numerous problems: it is slow, potentially unsafe for your repository, and clunky to use.\nFor that reason I won't describe how to use it here.\n\n\n## Enter `git filter-repo`\n\nPeople have since built simpler, more effective tools for performing git history manipulations, and the best one I've found is [git-filter-repo][filter_repo_github]. I picked it after having been convinced by their [comparisons to other tools][filter_repo_github_subsec] in this area.\nThey cover many use cases in their [handbook][manpage], which is worth at least glancing over.\n\n## Example: Removing files from the git history\n\nIn this post I'll focus on the example of removing a file from the git history. However, this works the same with directories and similarly with glob patterns or regex; see `--path-glob` and `--path-regex`. \n\nFor illustration, I'll initialize an empty git repository and add two files, `file_1.txt` and `file_2.txt`, in a single commit.\n\n\n\n::: {.cell vscode='{\"languageId\":\"shellscript\"}' execution_count=2}\n``` {.bash .cell-code}\nmkdir /tmp/new-repo && cd /tmp/new-repo\ngit init\ntouch file_1.txt file_2.txt\ngit add .\ngit commit -m \"Initial commit\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInitialized empty Git repository in /private/tmp/new-repo/.git/\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[main (root-commit) 15e1368] Initial commit\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n 2 files changed, 0 insertions(+), 0 deletions(-)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n create mode 100644 file_1.txt\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n create mode 100644 file_2.txt\n```\n:::\n:::\n\n\n::: {.cell vscode='{\"languageId\":\"shellscript\"}' execution_count=3}\n``` {.bash .cell-code}\ngit log --name-status --oneline\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n15e1368 (HEAD -> main) Initial commit\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nA\tfile_1.txt\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nA\tfile_2.txt\n```\n:::\n:::\n\n\nFor this example our plan will be to delete `file_2.txt` from the git history _without_ deleting `file_2.txt` itself.\n\n### Step 1: Decaching\n\n\"Decaching\" is a word I made up for this step of \"remove the file from the current git commit but keep it around in the folder.\" You can do this with\n\n::: {.cell vscode='{\"languageId\":\"shellscript\"}' execution_count=4}\n``` {.bash .cell-code}\ngit rm --cached file_2.txt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nrm 'file_2.txt'\n```\n:::\n:::\n\n\nVerify by checking that `ls` still shows both files, and that `git status` shows that `file_2.txt` is no longer tracked.\n\n::: {.cell vscode='{\"languageId\":\"shellscript\"}' execution_count=5}\n``` {.bash .cell-code}\nls\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfile_1.txt\tfile_2.txt\n```\n:::\n:::\n\n\n::: {.cell vscode='{\"languageId\":\"shellscript\"}' execution_count=6}\n``` {.bash .cell-code}\ngit status --short\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nD  file_2.txt\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n?? file_2.txt\n```\n:::\n:::\n\n\n### Step 2: `filter-repo`\n\nWith `file_2.txt` unstaged, apply `filter-repo` like this to delete `file_2.txt` from the history:\n\n::: {.cell vscode='{\"languageId\":\"shellscript\"}' execution_count=7}\n``` {.bash .cell-code}\ngit filter-repo --path file_2.txt --invert-paths --force\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\rParsed 1 commits\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNew history written in 0.03 seconds; now repacking/cleaning...\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nRepacking your repo and cleaning out old unneeded objects\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nHEAD is now at a804524 Initial commit\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEnumerating objects: 3, done.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nCounting objects:  33% (1/3)\rCounting objects:  66% (2/3)\rCounting objects: 100% (3/3)\rCounting objects: 100% (3/3), done.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nWriting objects:  33% (1/3)\rWriting objects:  66% (2/3)\rWriting objects: 100% (3/3)\rWriting objects: 100% (3/3), done.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nTotal 3 (delta 0), reused 0 (delta 0), pack-reused 0\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nCompletely finished after 0.08 seconds.\n```\n:::\n:::\n\n\nThe `--path` specifies the path you're trying to target for removal, and the `--invert-paths` is basically the logical negation of the filtering condition, so when it's applied it will _only delete_ `file_2.txt`. When you leave that flag off, you instead _delete everything except_ `file_2.txt`. You get only the file, or everything but the file.\n\nThe `--force` flag is needed because `filter-repo` expects us to follow best practices by only using it on a fresh clone. \nIn practice[^fresh_clone], you would commit all your work, get a clean git state, and make a fresh clone of your repo to operate on with `filter-repo`. \n\nNow check the files in the git log and filesystem:\n\n::: {.cell vscode='{\"languageId\":\"shellscript\"}' execution_count=8}\n``` {.bash .cell-code}\nls\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfile_1.txt\tfile_2.txt\n```\n:::\n:::\n\n\n::: {.cell vscode='{\"languageId\":\"shellscript\"}' execution_count=9}\n``` {.bash .cell-code}\ngit log --name-status --oneline                         \n```\n\n::: {.cell-output .cell-output-stdout}\n```\na804524 (HEAD -> main) Initial commit\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nA\tfile_1.txt\n```\n:::\n:::\n\n\nThe single commit now does not have any information pertaining to `file_2.txt`, and `file_2.txt` is still around on the filesystem.\n(If you just wanted to delete it completely, you could just skip the detaching step altogether.)\n\nThat's all there is to it!\n\n\n\n[filter_repo_github]: https://github.com/newren/git-filter-repo\n[filter_repo_github_subsec]: https://github.com/newren/git-filter-repo#why-filter-repo-instead-of-other-alternatives\n[manpage]: https://htmlpreview.github.io/?https://github.com/newren/git-filter-repo/blob/docs/html/git-filter-repo.html\n\n[^fresh_clone]: See [this part of the handbook](https://htmlpreview.github.io/?https://github.com/newren/git-filter-repo/blob/docs/html/git-filter-repo.html#FRESHCLONE)\n\n[github_filesize_caps]: https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}